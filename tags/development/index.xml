<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on Oops Hardware</title><link>https://opensourcehardware.io/tags/development/</link><description>Recent content in Development on Oops Hardware</description><generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>rollcake.dev@gmail.com (Yogo)</managingEditor><webMaster>rollcake.dev@gmail.com (Yogo)</webMaster><copyright>© 2025 Yogo</copyright><lastBuildDate>Mon, 25 Aug 2025 23:32:29 +0900</lastBuildDate><atom:link href="https://opensourcehardware.io/tags/development/index.xml" rel="self" type="application/rss+xml"/><item><title>빛나리(Bitnari) 프로젝트</title><link>https://opensourcehardware.io/projects/bitnari/</link><pubDate>Mon, 25 Aug 2025 23:32:29 +0900</pubDate><author>rollcake.dev@gmail.com (Yogo)</author><guid>https://opensourcehardware.io/projects/bitnari/</guid><description>&lt;p>앰비언트(Ambient) 라이팅 프로젝트&lt;/p></description></item><item><title>NES CPU(6502) 에뮬레이션 - 4</title><link>https://opensourcehardware.io/projects/nes/cpu-emulation-4/</link><pubDate>Mon, 07 Mar 2022 13:10:06 +0900</pubDate><author>rollcake.dev@gmail.com (Yogo)</author><guid>https://opensourcehardware.io/projects/nes/cpu-emulation-4/</guid><description>&lt;!-- +++
author = "Yogo"
title = "NES CPU(6502) 에뮬레이션 - 4 (마무리)"
date = 2022-03-07T13:10:06+09:00
draft = false
# categories = ["Projects"]
series = ["NES Emulator"]
tags = ["프로젝트", "NES", "Emulator"]
# type = "post"
+++ -->
&lt;h2 class="relative group">테스트 롬파일
&lt;div id="테스트-롬파일" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%ed%85%8c%ec%8a%a4%ed%8a%b8-%eb%a1%ac%ed%8c%8c%ec%9d%bc" aria-label="앵커">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>CPU 에뮬레이션이 어느정도 완료가 되었으면 실제 코드를 구동 시켜서 정상적으로 동작 하는지 검증이 필요합니다. 검증을 위해서 6502에 맞게 컴파일된 바이너리가 필요한데 NES ROM 파일에는 당연히 게임 실행을 위한 바이너리 코드가 포함되어 있으므로 이를 활용하면 됩니다.&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://opensourcehardware.io/projects/nes/cpu-emulation-4/featured_cpu_test.png"/></item><item><title>Nintendo Entertainment System</title><link>https://opensourcehardware.io/projects/nes/</link><pubDate>Mon, 07 Mar 2022 13:10:06 +0900</pubDate><author>rollcake.dev@gmail.com (Yogo)</author><guid>https://opensourcehardware.io/projects/nes/</guid><description>&lt;p>닌텐도 엔터테인먼트 시스템(아시아: 패밀리) 에뮬레이션에 대한 프로젝트 입니다.&lt;/p></description></item><item><title>NES CPU(6502) 에뮬레이션 - 3</title><link>https://opensourcehardware.io/projects/nes/cpu-emulation-3/</link><pubDate>Sat, 19 Feb 2022 02:25:57 +0900</pubDate><author>rollcake.dev@gmail.com (Yogo)</author><guid>https://opensourcehardware.io/projects/nes/cpu-emulation-3/</guid><description>&lt;!-- +++
author = "Yogo"
title = "NES CPU(6502) 에뮬레이션 - 3"
date = 2022-02-19T02:25:57+09:00
draft = false
# # categories = ["Projects"]
series = ["NES Emulator"]
tags = ["프로젝트", "NES", "Emulator"]
# # type = "post"
+++ -->
&lt;p>이전 포스트에서 레지스터와 메모리 인터페이스를 정의 하였고 이번 포스트에서는 명령어 세트와 어드레싱 모드 구현에 대해 다루어 보고자 합니다.&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://opensourcehardware.io/projects/nes/cpu-emulation-3/featured.png"/></item><item><title>서피스 다이얼 클론</title><link>https://opensourcehardware.io/projects/suface-dial/</link><pubDate>Tue, 15 Feb 2022 22:43:26 +0900</pubDate><author>rollcake.dev@gmail.com (Yogo)</author><guid>https://opensourcehardware.io/projects/suface-dial/</guid><description>&lt;p>서피스 다이얼 기능을 구현하는 하드웨어 프로젝트 입니다.&lt;/p></description></item><item><title>NES CPU(6502) 에뮬레이션 - 2</title><link>https://opensourcehardware.io/projects/nes/cpu-emulation-2/</link><pubDate>Thu, 10 Feb 2022 23:35:55 +0900</pubDate><author>rollcake.dev@gmail.com (Yogo)</author><guid>https://opensourcehardware.io/projects/nes/cpu-emulation-2/</guid><description>&lt;!-- +++
author = "Yogo"
title = "NES CPU(6502) 에뮬레이션 - 2"
date = 2022-02-10T23:35:55+09:00
draft = false
# # categories = ["Projects"]
series = ["NES Emulator"]
tags = ["프로젝트", "NES", "Emulator"]
# type = "post"
+++ -->
&lt;p>이전 포스트에서 6502 프로세서의 간략한 특징과 명령어, 어드레싱 모드에 대해서 정리를 했습니다. 에뮬레이션을 위해서는 더 많은 내용의 정리가 필요하지만 이미 레퍼런스 자료가 많이 있으므로 상세한 정보는 생략하고 일부 코드 예제를 들어 어떻게 구현할 것인지에 대한 고찰과 짤막한 코드와 함께 구현하는 과정을 남겨 보겠습니다.&lt;/p></description></item><item><title>NES CPU(6502) 에뮬레이션 - 1</title><link>https://opensourcehardware.io/projects/nes/cpu-emulation-1/</link><pubDate>Mon, 07 Feb 2022 18:07:00 +0900</pubDate><author>rollcake.dev@gmail.com (Yogo)</author><guid>https://opensourcehardware.io/projects/nes/cpu-emulation-1/</guid><description>&lt;!-- +++
author = "Yogo"
title = "NES CPU(6502) 에뮬레이션 - 1"
date = 2022-02-07T18:07:00+09:00
draft = false
# categories = ["Projects"]
series = ["NES Emulator"]
tags = ["프로젝트", "NES", "Emulator"]
# type = "post"
+++ -->
&lt;p>NES 에뮬레이션을 위해서 C# 환경에서 6502 CPU를 구현 하면서 참조한 지식과 경험을 정리합니다. 이전의 NESDOC&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> 포스트 내용이 상당수 그대로 반영이 되어있습니다.&lt;/p></description></item><item><title>유튜브 플레이어 컨트롤러 제작기 - 02</title><link>https://opensourcehardware.io/projects/media-controller/2/</link><pubDate>Fri, 12 Nov 2021 11:29:20 +0900</pubDate><author>rollcake.dev@gmail.com (Yogo)</author><guid>https://opensourcehardware.io/projects/media-controller/2/</guid><description>&lt;p>지난 포스트에서 미디어 컨트롤러를 제작하고 동작하는 것을 확인하였습니다.
다만, 포스트 마지막에 남겼듯이 유튜브 다양한 기능 제어를 위해서는 미디어 컨트롤러만으로는 한계점이 있습니다. 당연히도 그럴 것이 기본적으로 표준 규격 컨트롤로서의 역할만 가능 하기 때문입니다.&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://opensourcehardware.io/projects/media-controller/2/featured.jpg"/></item><item><title>유튜브 플레이어 컨트롤러 제작기 - 01</title><link>https://opensourcehardware.io/projects/media-controller/1/</link><pubDate>Mon, 08 Nov 2021 11:22:45 +0900</pubDate><author>rollcake.dev@gmail.com (Yogo)</author><guid>https://opensourcehardware.io/projects/media-controller/1/</guid><description>&lt;p>PC에서 게임을 하거나 음악을 들을 때 간혹 소리가 너무 작거나 또는 큰 이유로 볼륨을 조절해야할 때가 종종 있습니다. 외장 DAC이나 사운드 카드 또는 스피커를 사용 시 물리적인 볼륨조절 노브(knob)가 있으면 그 것들을 이용하면 되지만 헤드폰이나 이어폰 또는 물리적인 볼륨 조절이 어려운 경우는 작업표시줄 하단의 스피커 볼륨 조절을 이용해야합니다.&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://opensourcehardware.io/projects/media-controller/1/featured.jpg"/></item><item><title>모스(Morse) 부호 키보드 만들기</title><link>https://opensourcehardware.io/projects/morse-keyboard/</link><pubDate>Thu, 28 Oct 2021 11:58:34 +0900</pubDate><author>rollcake.dev@gmail.com (Yogo)</author><guid>https://opensourcehardware.io/projects/morse-keyboard/</guid><description>&lt;p>잠이오지 않아 뒤척이던 어느 늦은밤 커뮤니티의 게시물을 훑어보던 도중 재미있는 짤을 하나 발견했습니다.&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://opensourcehardware.io/projects/morse-keyboard/featured.jpg"/></item><item><title>짤(밈) 생성 페이지 제작</title><link>https://opensourcehardware.io/posts/2021/10/web-meme-generator/</link><pubDate>Thu, 07 Oct 2021 11:11:23 +0900</pubDate><author>rollcake.dev@gmail.com (Yogo)</author><guid>https://opensourcehardware.io/posts/2021/10/web-meme-generator/</guid><description>&lt;p>요즘은 사회 전반적으로 특정 이벤트나 이슈가 생길 때마다 사람들이 재치있는 아이디어로 국내에선 짤, 해외에선 밈(meme)이라고 불리우는 패러디 이미지가 많이 퍼지고 있습니다.&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://opensourcehardware.io/posts/2021/10/web-meme-generator/featured.png"/></item><item><title>PS2 듀얼쇼크 컨트롤러 호스트(리더) 구현 및 분석</title><link>https://opensourcehardware.io/posts/2021/01/ps2-dualshock-host/</link><pubDate>Wed, 27 Jan 2021 03:21:59 +0900</pubDate><author>rollcake.dev@gmail.com (Yogo)</author><guid>https://opensourcehardware.io/posts/2021/01/ps2-dualshock-host/</guid><description>&lt;!-- https://en.wikipedia.org/wiki/DualShock#/media/File:DualShock_2.jpg -->
&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/DualShock_2.jpg/1280px-DualShock_2.jpg"/>
&lt;p>[이미지 출처] 위키페디아 &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>2007년 초쯤 마이크로프로세서(이하 MCU) 스터디를 하면서 주로 해외에서 하드웨어 관련 정보를 찾아보던 도중 우연히 어느 일본인이 개인 홈페이지에 플레이스테인션2(이하 PS2) 듀얼쇼크2 컨트롤러(이하 듀속 또는 DS2) 시그널을 분석해서 공유한 페이지를 발견하게 됩니다.&lt;/p></description></item></channel></rss>